import discord
from discord.ext import commands
import cohere
TOKEN = 'MTIwMTMzMzg5MjU4MjQ3MzgwOA.GvoPck.LCeIujtZ-GwrFAgU_6JW5h0L_HF3huu964l4cw'  # C'est le token discord √ßa permet en gros de se co au client
INTELLIGENCE_CHANNEL = 'üß†„Éªintelligence-artificiel'  # Nom du salon o√π le bot envoie des messages
COHERE_API_KEY = 'Ff9vjkxkJKpHCDBQyg6XGfnK1IyKv5XVUvBcHS7h'  # La cl√© API de l'ia 

# Initialiser le client Cohere en gros c'est l'api pour le bot
co = cohere.Client(COHERE_API_KEY)

def split_message(message, max_length=2000):
    """Divise un message en plusieurs parties si n√©cessaire.""" # Pour √©viter que le messages fasse plus de 2000 caract√®res car discord c'est max 2000 donc si son message fait plus de 2000 caract√®re (Au bot) Il va le diviser en plusieurs
    return [message[i:i + max_length] for i in range(0, len(message), max_length)]

def truncate_message(message, max_length=2000):
    """Tronque le message pour s'assurer qu'il ne d√©passe pas max_length.""" # L√† il c'est la v√©rification du truc au dessus
    return message[:max_length]

message_history = {}  # Dictionnaire pour stocker l'historique des messages comme √ßa le bot a un contexte
class Ia(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    
    @commands.Cog.listener()
    async def on_message(self, message):  # Ajoute 'self' comme premier argument
        if isinstance(message.channel, discord.DMChannel):
            return  # Ignore les messages priv√©s (DM)
        if message.channel.name == INTELLIGENCE_CHANNEL and not message.author.bot:
            if message.channel.id not in message_history:
                message_history[message.channel.id] = []

            # Ajouter le message actuel √† l'historique
            message_history[message.channel.id].append(message.content)

            # Conserver les 10 derniers messages pour le contexte
            context = "\n".join(message_history[message.channel.id][-10:])
            await message.channel.trigger_typing()  # Correction pour utiliser 'await'
            response_text = ""
            try:
                # Demander √† l'IA de r√©pondre en tenant compte du contexte et la fa√ßon de r√©pondre
                response = co.chat(
                    message=f"Voici les anciens messages de la discussion (Si il n'y en as pas tant pis r√©pond sans tenir compte du contexte): [{context}]Hey, tu es PathFinder, un bot Discord cr√©e par Link qui aide les √©tudiants avec leurs travaux tu es un bot sp√©cialiser dans toutes les mati√®res du coll√®ge √† la Terminal. Ne te pr√©sente pas sauf si quelqu'un te dit bonjour. R√©ponds de mani√®re famili√®re, tutoie, et utilise des phrases courtes. Si jamais le message est vulgaire, clash la personne qui t'a envoy√© ce message. Voici le message : {message.content}"
                )
                response_text = response.text
                
                # Assurer que la r√©ponse est courte
                response_text = truncate_message(response_text)

                # Diviser la r√©ponse en plusieurs messages si n√©cessaire
                messages = split_message(response_text)
                
                # Envoyer chaque partie du message si n√©cessaire  
                for msg in messages:
                    await message.channel.send(msg)
            
            # Gestion d'erreurs
            except Exception as e:
                print(f"Erreur avec l'API Cohere: {e}")
                await message.channel.send('D√©sol√©, il y a eu un probl√®me avec l\'API Cohere.')
        else:
            return


def setup(bot):
    bot.add_cog(Ia(bot))